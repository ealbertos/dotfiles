{"version":3,"file":"pipeout.js","sources":["../src/index.ts"],"sourcesContent":["export type PossiblePromise<T> = T | Promise<T>;\nexport type Unary<In, Out> = (x: In) => Out;\nexport type AsyncUnary<In, Out> = (x: In) => PossiblePromise<Out>;\n\nexport interface Pipe<T> {\n  <U>(transformer: Unary<T, U>): Pipe<U>;\n  value: T;\n}\n\nexport interface PipeA<T> {\n  <U>(transformer: AsyncUnary<T, U>): PipeA<U>;\n  value: Promise<T>;\n}\n\nexport interface Piper<T, U> {\n  <V>(transformer: Unary<U, V>): Piper<T, V>;\n  run: (value: T) => U;\n}\n\nexport interface PiperA<T, U> {\n  <V>(transformer: AsyncUnary<U, V>): PiperA<T, V>;\n  run: (value: PossiblePromise<T>) => Promise<U>;\n}\n\n/**\n * Pipe a value through a series of transformers.\n * @param value - The value to send through the pipeline.\n * @returns nextPipe - Pass a transformer to pipe again. Or, use .value to get the transformed value.\n */\nexport function pipe<T>(value: T): Pipe<T> {\n  function nextPipe<U>(transformer: Unary<T, U>) {\n    return pipe<U>(transformer(value));\n  }\n  nextPipe.value = value;\n  return nextPipe;\n}\n\nexport { pipe as pip };\n\n/**\n * Pipe a value through a series of transformers,\n * where the value can be a promise and transformers can return promises.\n * @param value - The value to send through the pipeline.\n * @returns nextPipe - Pass a transformer to pipe again. Or, use .value to get the transformed value.\n */\nexport function pipeA<T>(value: PossiblePromise<T>): PipeA<T> {\n  function nextPipe<U>(transformer: AsyncUnary<T, U>) {\n    return pipeA(Promise.resolve(value).then(transformer));\n  }\n  nextPipe.value = Promise.resolve(value);\n  return nextPipe;\n}\n\n/**\n * Create a series of transformers to pipe a value through.\n * @param transformer - A function that transforms the value.\n * @returns nextPipe - Pass a transformer to pipe again. Or, call .run to run the transforms.\n */\nexport function piper<T, U>(transformer: Unary<T, U>): Piper<T, U> {\n  function nextPipe<V>(nextTransformer: Unary<U, V>) {\n    return piper<T, V>(function(value: T) {\n      return nextTransformer(transformer(value));\n    });\n  }\n  nextPipe.run = (value: T) => transformer(value);\n  return nextPipe;\n}\n\n/**\n * Create a series of transformers to pipe a value through,\n * where the value can be a promise and transformers can return promises.\n * @param transformer - A function that transforms the value.\n * @returns nextPipe - Pass a transformer to pipe again. Or, call .run to run the transforms.\n */\nexport function piperA<T, U>(transformer: AsyncUnary<T, U>): PiperA<T, U> {\n  function nextPipe<V>(nextTransformer: AsyncUnary<U, V>) {\n    return piperA(async function(valuePromise: PossiblePromise<T>): Promise<V> {\n      const value = await valuePromise;\n      const next = await transformer(value);\n      return nextTransformer(next);\n    });\n  }\n  nextPipe.run = async function(value: PossiblePromise<T>) {\n    return transformer(await value);\n  };\n  return nextPipe;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;AAKA,SAAgB,IAAI,CAAI,KAAQ;IAC9B,SAAS,QAAQ,CAAI,WAAwB;QAC3C,OAAO,IAAI,CAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KACpC;IACD,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,OAAO,QAAQ,CAAC;CACjB;AAED,AAEA;;;;;;AAMA,SAAgB,KAAK,CAAI,KAAyB;IAChD,SAAS,QAAQ,CAAI,WAA6B;QAChD,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;KACxD;IACD,QAAQ,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxC,OAAO,QAAQ,CAAC;CACjB;;;;;;AAOD,SAAgB,KAAK,CAAO,WAAwB;IAClD,SAAS,QAAQ,CAAI,eAA4B;QAC/C,OAAO,KAAK,CAAO,UAAS,KAAQ;YAClC,OAAO,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;SAC5C,CAAC,CAAC;KACJ;IACD,QAAQ,CAAC,GAAG,GAAG,CAAC,KAAQ,KAAK,WAAW,CAAC,KAAK,CAAC,CAAC;IAChD,OAAO,QAAQ,CAAC;CACjB;;;;;;;AAQD,SAAgB,MAAM,CAAO,WAA6B;IACxD,SAAS,QAAQ,CAAI,eAAiC;QACpD,OAAO,MAAM,CAAC,UAAe,YAAgC;;gBAC3D,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;gBACjC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;gBACtC,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC;aAC9B;SAAA,CAAC,CAAC;KACJ;IACD,QAAQ,CAAC,GAAG,GAAG,UAAe,KAAyB;;YACrD,OAAO,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC;SACjC;KAAA,CAAC;IACF,OAAO,QAAQ,CAAC;CACjB;;;;"}