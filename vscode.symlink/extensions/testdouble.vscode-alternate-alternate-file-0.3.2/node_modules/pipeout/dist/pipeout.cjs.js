'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Pipe a value through a series of transformers.
 * @param value - The value to send through the pipeline.
 * @returns nextPipe - Pass a transformer to pipe again. Or, use .value to get the transformed value.
 */
function pipe(value) {
    function nextPipe(transformer) {
        return pipe(transformer(value));
    }
    nextPipe.value = value;
    return nextPipe;
}
/**
 * Pipe a value through a series of transformers,
 * where the value can be a promise and transformers can return promises.
 * @param value - The value to send through the pipeline.
 * @returns nextPipe - Pass a transformer to pipe again. Or, use .value to get the transformed value.
 */
function pipeA(value) {
    function nextPipe(transformer) {
        return pipeA(Promise.resolve(value).then(transformer));
    }
    nextPipe.value = Promise.resolve(value);
    return nextPipe;
}
/**
 * Create a series of transformers to pipe a value through.
 * @param transformer - A function that transforms the value.
 * @returns nextPipe - Pass a transformer to pipe again. Or, call .run to run the transforms.
 */
function piper(transformer) {
    function nextPipe(nextTransformer) {
        return piper(function (value) {
            return nextTransformer(transformer(value));
        });
    }
    nextPipe.run = (value) => transformer(value);
    return nextPipe;
}
/**
 * Create a series of transformers to pipe a value through,
 * where the value can be a promise and transformers can return promises.
 * @param transformer - A function that transforms the value.
 * @returns nextPipe - Pass a transformer to pipe again. Or, call .run to run the transforms.
 */
function piperA(transformer) {
    function nextPipe(nextTransformer) {
        return piperA(function (valuePromise) {
            return __awaiter(this, void 0, void 0, function* () {
                const value = yield valuePromise;
                const next = yield transformer(value);
                return nextTransformer(next);
            });
        });
    }
    nextPipe.run = function (value) {
        return __awaiter(this, void 0, void 0, function* () {
            return transformer(yield value);
        });
    };
    return nextPipe;
}

exports.pip = pipe;
exports.pipe = pipe;
exports.pipeA = pipeA;
exports.piper = piper;
exports.piperA = piperA;
//# sourceMappingURL=pipeout.cjs.js.map
