import * as AlternatePattern from "./AlternatePattern";
import { AlternateFileNotFoundError } from "./AlternateFileNotFoundError";
/**
 * the data type for a .projections.json file.
 */
export interface Projections {
    [sourcePattern: string]: SourceData;
}
export interface SourceData {
    alternate?: string | string[];
}
export declare const projectionsFilename = ".projections.json";
/**
 * Find the path of the alternate file (if the alternate file actually exists)
 * @param userFilePath
 * @return ResultP(alternate file path, list of all attempted alternate files)
 */
export declare const findAlternateFile: (userFilePath: string) => Promise<import("result-async").Result<string, AlternateFileNotFoundError>>;
/**
 * Find the path of the alternate file if the alternate file actually exists, or create the file if it doesn't.
 * @param userFilePath
 * @return ResultP(alternate file path, error if no possible alternate file)
 *
 */
export declare const findOrCreateAlternateFile: (userFilePath: string) => Promise<import("result-async").Result<string, AlternateFileNotFoundError>>;
/**
 * Parse the projections file into alternate pattern lookup objects.
 * @param projections
 */
export declare const projectionsToAlternatePatterns: (projections: Projections) => AlternatePattern.t[];
export declare const create: () => void;
export declare const findProjectionsFile: (userFilePath: string) => Promise<import("result-async").Result<string, string>>;
/**
 * Read and parse the projections file.
 * @param userFilePath
 * @returns projections data
 */
export declare const readProjections: (projectionsPath: string) => Promise<import("result-async").Result<Projections, AlternateFileNotFoundError>>;
