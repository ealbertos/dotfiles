/**
 * Pipeable console.log
 * @param args - Varadic args to tag the log with.
 * @param data - Final data to console.log
 */
export declare const log: (...args: any[]) => <T>(data: T) => T;
/**
 * Async sleep
 * @param milliseconds
 */
export declare const sleep: (milliseconds: number) => Promise<number>;
/**
 * Zip two arrays together. Output is the length of the first array.
 * @param array1
 * @param array2
 */
export declare const zip: <T, U>(array1: T[], array2: U[]) => [T, U][];
/**
 * Pipeable version of String.replace
 * @param searchValue - The pattern to replace
 * @param replaceValue  - The value to replace the pattern with
 * @returns the updated string.
 */
export declare const replace: (searchValue: string | RegExp, replaceValue: string) => (oldString: string) => string;
export declare const map: <T, U>(f: (x: T) => U) => (xs: T[]) => U[];
/** Convert an object to a list of tuples. */
export declare function toPairs<Value>(dictionary: {
    [key: string]: Value;
}): [string, Value][];
/** Shallow flatten a list. */
export declare function flatten<T>(xss: T[][]): T[];
export declare function compact<T>(xs: (T | undefined | null)[]): T[];
export declare function filter<T>(f: (x: T) => boolean, xs: T[]): T[];
export declare function reject<T>(f: (x: T) => boolean, xs: T[]): T[];
export declare function isNil(x: any): boolean;
export declare const titleCase: (s: string) => string;
