import { Result, ResultP } from "result-async";
export declare type t = string;
/**
 * Find a file by recursively walking up the directory chain.
 * @param fileName - The filename to look for.
 * @param fromFilePath - The file to start looking from
 * @return the full path/"not found"
 */
export declare const findFileFrom: (fileName: string) => (fromFilePath: string) => Promise<Result<string, string>>;
/**
 * Create a new file, with contents. Also creates the path if necessary.
 * @param path
 * @param contents
 * @returns filePath
 */
export declare function makeFile(filePath: string, contents?: string): Promise<Result<string, string>>;
/**
 * Create a new file, with contents. Fails if the directory doesn't exist.
 * @param path
 * @param contents
 * @returns filePath
 */
export declare const makeFileShallow: (contents: string) => (filePath: string) => Promise<Result<string, string>>;
export declare function makeDirectoryDeep(dirPath: string): ResultP<string, string>;
/**
 * Delete a file by path
 * @param filePath
 * @returns ResultP<the deleted file, an error message>
 */
export declare const deleteFile: (filePath: string) => Promise<Result<string, string>>;
/**
 * Check if any of the provided files exists.
 * @param filePaths
 * @returns Ok(filePath) | Error(null)
 */
export declare const findExisting: (filePaths: string[]) => Promise<Result<string, string[]>>;
/**
 * Read the contents of a file.
 */
export declare const readFile: (path: string) => Promise<Result<string, any>>;
/**
 * Checks if a file exists and is readable.
 * @param filePath - The file path to check for
 * @returns Ok(path) if the file exist, Error(null) if it doesn't.
 */
export declare const fileExists: (filePath: string) => Promise<Result<string, string>>;
export declare function ls(directoryPath: string): ResultP<string[], string>;
/**
 * Wrap a JSON parse in a
 * @returns Ok(body)
 */
export declare const parseJson: <T>(data: string, fileName?: string | undefined) => Result<T, string>;
