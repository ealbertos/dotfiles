/**
 * Represents the result of an operation that could succeed or fail.
 */
export declare type Result<OkData, ErrorMessage> = OkResult<OkData> | ErrorResult<ErrorMessage>;
/**
 * Wraps data in an Ok.
 * @param data The success payload
 *
 * ```javascript
 * ok(1)
 * ```
 */
export declare const ok: <T>(data: T) => OkResult<T>;
/**
 * Wraps a message in an Error.
 * @param data The success payload
 *
 * ```javascript
 * error("not found")
 * ```
 */
export declare const error: <T>(message: T) => ErrorResult<T>;
/**
 * Type guard to check if a Result is Ok
 * @param result - The result to check
 *
 * ```javascript
 * const result = ok(1);
 *
 * if (isOk(result)) {
 *   result.ok // exists
 * }
 * ```
 */
export declare function isOk(result: Result<any, any>): result is OkResult<any>;
/**
 * Type guard to check if a Result is an Error
 * @param result - The result to check
 *
 * ```javascript
 * const result = error("not found");
 *
 * if (isError(result)) {
 *   result.error // exists
 * }
 * ```
 */
export declare function isError(result: Result<any, any>): result is ErrorResult<any>;
/**
 * Type guard to check if an object is a Result.
 * @param result - The object to check
 *
 * ```javascript
 * const result = ;
 *
 * isResult(error("not found")) // true
 * ```
 */
export declare const isResult: (result: any) => result is Result<any, any>;
/**
 * Represents the result of a successful operation.
 * Create one with Result.ok(data)
 * Fantasy-land Functor
 */
declare class OkResult<T> {
    ok: T;
    constructor(ok: T);
    toString(): string;
    map<U>(f: (ok: T) => U): OkResult<U>;
    "fantasy-land/map"<U>(f: (ok: T) => U): OkResult<U>;
}
/**
 * Represents the result of an unsuccessful operation.
 * Create one with Result.ok(data)
 * Fantasy-land Functor
 */
declare class ErrorResult<T> {
    error: T;
    constructor(error: T);
    toString(): string;
    map(_f: (ok: any) => any): ErrorResult<T>;
    "fantasy-land/map"(f: (ok: any) => any): ErrorResult<T>;
}
export {};
